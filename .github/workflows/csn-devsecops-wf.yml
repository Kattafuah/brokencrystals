name: csn-devsecops-wf

on:
  workflow_dispatch:
    inputs:
      devsecops_action:
        type: choice
        description: Select DevSecOps Action
        options:
          - btpscani
          - deploy
          - dast
        required: true

permissions:
  checks: write

jobs:
  btpscani:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.devsecops_action == 'btpscani' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SAST Scan
        run: grep -r -e "password" -e "secret" -e "keys" .

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and start Docker containers
        run: docker-compose --file=docker-compose.local.yml up -d --build

      - name: Checking for images built and pulled
        run: sudo docker images

      # Tagging the Docker images manually using docker tag command
      - name: Tag Docker images
        run: |
          docker tag brokencrystals_nodejs:latest ${{ vars.DOCKERHUB_USERNAME }}/brokencrystals:nodejs-${{ github.sha }}
          docker tag postgres:latest ${{ vars.DOCKERHUB_USERNAME }}/brokencrystals:postgres-${{ github.sha }}
          docker tag sj26/mailcatcher:latest ${{ vars.DOCKERHUB_USERNAME }}/brokencrystals:mailcatcher-${{ github.sha }}

      - name: Push Docker images
        run: |
          docker push ${{ vars.DOCKERHUB_USERNAME }}/brokencrystals:nodejs-${{ github.sha }}
          docker push ${{ vars.DOCKERHUB_USERNAME }}/brokencrystals:postgres-${{ github.sha }}
          docker push ${{ vars.DOCKERHUB_USERNAME }}/brokencrystals:mailcatcher-${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    #needs: btpscani  # Ensure that deploy job depends on successful completion of btpscani job
    if: ${{ github.event.inputs.devsecops_action == 'deploy' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v1

      - name: Load AWS EKS credentials
        run: aws eks update-kubeconfig --name csn-capstone --region us-east-1 # Change to your cluster name

      - name: Update Deployment Image
        run: |
          sed -i "s/VERSION_TAG/${{ github.sha }}/g" ./eks-manifest-files/app.yaml

      - name: Deploy to EKS
        run: kubectl apply -f ./eks-manifest-files/app.yaml --validate=false # Path to your Kubernetes config files

      - name: Verify deployment and check application health
        run: |          
          kubectl rollout status deployment/nodejs-deployment --timeout=5m || { echo 'Deployment Verification failed'; exit 1; }

          kubectl wait --for=condition=ready pod -l app=nodejs-deployment --timeout=5m || { echo 'Pod readiness check failed'; exit 1; }

          # Fetch the application URL from the ingress or service
          APP_URL=$(kubectl get svc nodejs-deployment -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Application URL is: $APP_URL"

          # Set the URL as an output to be used in the next job
          echo "APP_URL=$APP_URL" >> $GITHUB_ENV

  dast:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.devsecops_action == 'dast' }}
    needs: deploy
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Run OWASP ZAP DAST Scan
        continue-on-error: true
        run: |
          # Create a directory to ensure permissions are correct
          mkdir -p zap-output

          # Set directory permissions
          chmod 777 -R zap-output/
          
           # Use the APP_URL environment variable set in the deploy job
          echo "Running OWASP ZAP scan on URL: $APP_URL"
          docker run --rm -v "$(pwd)/zap-output:/zap/wrk" zaproxy/zap-stable zap-baseline.py \
          -t "$APP_URL" \
          -r zap-report.html || true

      - name: List output directory contents
        run: |
          echo "Checking contents of zap-output directory..."
          ls -la zap-output/

      - name: Check ZAP container logs
        run: |
          docker logs $(docker ps -lq) || true
            

      - name: Display ZAP Report (Optional)
        if: ${{ always() }}
        run: |
          if [ -f zap-output/zap-report.html ]; then
          echo "ZAP report generated successfully. Displaying a preview:"
          cat zap-output/zap-report.html | head -n 50
          else
          echo "ZAP report not generated."
          fi

      - name: Upload ZAP Report (Optional)
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap-output/*.html

